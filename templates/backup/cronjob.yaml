{{- if .Values.backup.enabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "netbox.fullname" . }}-backup
  {{- with .Values.commonAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  labels:
{{ include "netbox.labels" . | indent 4 }}
spec:
  schedule: {{ required "Cron schedule is required" .Values.backup.cronSchedule }}
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: "borgmatic"
            image: "{{ .Values.backup.image.name }}:{{ .Values.backup.image.tag }}"
            imagePullPolicy: {{ .Values.backup.image.pullPolicy }}
            command: ["/usr/local/bin/borgmatic-start.sh"]
            volumeMounts:
              {{- if .Values.reportsPersistence.enabled }}
              - name: reports
                mountPath: /opt/netbox/netbox/reports
                subPath: {{ .Values.reportsPersistence.subPath | default "" | quote }}
              - name: media
                mountPath: /opt/netbox/netbox/media
                subPath: {{ .Values.persistence.subPath | default "" | quote }}
                readOnly: true
              {{- end }}
              - name: script
                mountPath: /usr/local/bin/borgmatic-start.sh
                subPath: borgmatic-start.sh
                readOnly: true
              - name: config
                mountPath: /etc/borgmatic.d/config.yaml
                subPath: config.yaml
                readOnly: true
              - name: ssh-key
                mountPath: /run/secrets/ssh-key
                subPath: ssh-key
                readOnly: true
              - name: ssh-known-hosts
                mountPath: /run/secrets/ssh-known-hosts
                subPath: ssh-known-hosts
                readOnly: true
              {{- if .Values.backup.persistence.blockCache.enabled  }}
              - name: backup-cache
                mountPath: /root/.cache/borg
                subPath: borg
                readOnly: true
              {{- end }}
              {{- if .Values.backup.persistence.localRepo.enabled  }}
              - name: backup-local
                mountPath:  /mnt/borgmatic
                subPath: borgmatic
                readOnly: true
              - name: detached-key
                mountPath: /run/secrets/detached-key
                subPath: detached-key
                readOnly: true
              {{- end }}
            env:
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: {{ include "netbox.postgresql.secret" . | quote }}
                    key: {{ include "netbox.postgresql.secretKey" . | quote }}
                    optional: false
              {{- if (eq "repokey" .Values.backup.repoEncryptionType) }}
              - name: BORG_PASSPHRASE
                valueFrom:
                  secretKeyRef:
                    name: {{ .Values.backup.existingConfigSecret | default (printf "%s-backup-secret" (include "netbox.fullname" .)) }}
                    key: borgPassphrase
                    optional: false
              {{- end }}
              - name: BORG_INIT_IF_NOT_EXISTS
                valueFrom:
                  secretKeyRef:
                    name: {{ include "netbox.fullname" . }}-backup-secret
                    key: allowRepoCreation
                    optional: false
              - name: BORG_INIT_ENCRYPTION
                valueFrom:
                  secretKeyRef:
                    name: {{ include "netbox.fullname" . }}-backup-secret
                    key: repoEncryptionType
                    optional: false
          volumes:
            - name: config
              secret:
                secretName: {{ .Values.backup.existingConfigSecret | default (printf "%s-backup-secret" (include "netbox.fullname" .)) }}
                items:
                - key: config.yaml
                optional: false
            - name: script
              configMap:
                name: {{ include "netbox.fullname" . }}-backup-script
            - name: media
              {{- if .Values.persistence.enabled }}
              persistentVolumeClaim:
                claimName: {{ .Values.persistence.existingClaim | default (printf "%s-media" (include "netbox.fullname" .)) }}
              {{- else }}
              emptyDir: {}
              {{- end }}
            - name: reports
              {{- if .Values.persistence.enabled }}
              persistentVolumeClaim:
                claimName: {{ .Values.persistence.existingClaim | default (printf "%s-reports" (include "netbox.fullname" .)) }}
              {{- else }}
              emptyDir: {}
              {{- end }}
            - name: backup-cache
              {{- if .Values.backup.persistence.blockCache.enabled }}
              persistentVolumeClaim:
                claimName: {{ .Values.persistence.existingClaim | default (printf "%s-backup-cache" (include "netbox.fullname" .)) }}
              {{- else }}
              emptyDir: {}
              {{- end }}
            - name: backup-local
              {{- if .Values.backup.persistence.localRepo.enabled }}
              persistentVolumeClaim:
                claimName: {{ .Values.persistence.existingClaim | default (printf "%s-backup-local" (include "netbox.fullname" .)) }}
              {{- else }}
              emptyDir: {}
              {{- end }}
            - name: ssh-key
              secret:
                secretName: {{ .Values.backup.existingConfigSecret | default (printf "%s-backup-secret" (include "netbox.fullname" .)) }}
                items:
                - key: sshKey
                optional: true
            - name: ssh-known-hosts
              secret:
                secretName: {{ .Values.backup.existingConfigSecret | default (printf "%s-backup-secret" (include "netbox.fullname" .)) }}
                items:
                - key: sshKnownHosts
                optional: true
            {{- if (eq "keyfile" .Values.backup.repoEncryptionType) }}
            - name: detached-key
              secret:
                secretName: {{ .Values.backup.existingConfigSecret | default (printf "%s-backup-secret" (include "netbox.fullname" .)) }}
                items:
                - key: detachedKey
                optional: false
            {{- end }}
          restartPolicy: {{ .Values.backup.restartPolicy }}
          concurrencyPolicy: Forbid
{{- end }}
